#ifndef SNN_LIBRARY_H
#define SNN_LIBRARY_H

// max spikes to store per synapse
#ifndef MAX_SPIKES
#define MAX_SPIKES 20
#endif

#ifndef INPUT_MAX_SPIKES
#define INPUT_MAX_SPIKES 150
#endif




/**
 * General structures definition
 */

 
/// @brief LIF neuron model structure to store information about the neuron
typedef struct {
    //synapse_t **input_synapses; // lists of input and output synapses
    int *input_synapse_indexes; // indexes to get neuron input synapses from snn.synapses
    int n_input_synapse;
    int next_input_synapse;

    //synapse_t **output_synapses;
    int *output_synapse_indexes; // indexes to get neuron output synapses from snn.synapses
    int n_output_synapse;
    int next_output_synapse;

    // is input ot output neuron
    int is_input_neuron;
    int is_output_neuron;

    int excitatory; // 0 if inhibitory, else 1

    float v; // if at start it's postive, excitatory neuron, else inhibitory
    float r;// = 1.0; // membrane resistance
    float v_rest;// = 0;
    float v_reset;// = 0;
    float v_tresh;// = 1;

    int r_time, r_time_rest; //refractory time

    int t_last_spike; // time step when last spike has been generated by this neuron
} lif_neuron_t;



/// @brief Structure to store all the information about the synapses
typedef struct {
    float w; // if at start it is positive, excitatory, else inhibitory
    int delay; // the delay time of the synapse

    int *l_spike_times; // FIFO list
    int next_spike, last_spike, max_spikes; // indexes to control list

    void (*learning_rule)(); // pointer to learning rule function (STDP type)

    int t_last_pre_spike, t_last_post_spike; // time steps of the last spikes generated by synapse pre synaptic neuron and post synaptic neuron
    int pre_neuron_computed, post_neuron_computed; // used to know when to compute STDP

    lif_neuron_t *pre_synaptic_lif_neuron;
    lif_neuron_t *post_synaptic_lif_neuron;
} synapse_t;



/// @brief SNN structure to store all the information about the network
typedef struct {
    // network general information
    int n_neurons; // n neurons on the network
    int n_input; // number of input neurons
    int n_output; // number of output neurons

    int neuron_type; // type of the neurons of this network

    int n_synapses; // number of synapses of the network
    int n_input_synapses; // number of network input synapses
    int n_output_synapses; // number of network output synapses

    // pointers to different neuron types (one used on execution)
    lif_neuron_t *lif_neurons; 
    //hh_neuron_t *hh_neurons;

    void (*neuron_initializer)(), (*neuron_re_initializer)(); // function to initialize neurons
    void (*complete_step)(), (*input_step)(), (*output_step)(); // functions to run a step on the simulation

    // pointer to network synapses
    synapse_t *synapses;

    // hyperparameters
} spiking_nn_t;



/// Struct that contains information about the simulation configuration
typedef struct{
    // general
    int simulation_type, neuron_type, n_process, store, learn;

    char *spike_times_file, *weights_file, *times_file, *n_spikes_file, *final_network_file;
    char *network_file;

    // biological simulation
    int time_steps;
    char *input_spikes_file;

    // sample simulation
    int epochs;
    int n_samples;
    //input spikes...

    // control variables to indicate what parameters have been provided
    int behaviours_provided, delays_provided, weights_provided, training_zones_provided, thresholds_provided, refract_times_provided; // TODO: add more 
} simulation_configuration_t;



/// Struct used to store results of the simulation
typedef struct{
    double elapsed_time, elapsed_time_neurons, elapsed_time_neurons_input, elapsed_time_neurons_output, elapsed_time_synapses;
    unsigned char **generated_spikes;
    unsigned int *n_spikes_per_neuron;
} simulation_results_t;



/// Struct used to help the construction of the network
typedef struct{
    int **synaptic_connections, *neuron_excitatory, *training_zones; // change to uint in the future
    int *delay_list;
    float *weight_list;

    // lists dependent on neuron types
    // LIF neuron
    float *v_list, *v_thres_list, *R_list, *v_rest_list;
    int *r_time_list; //refractory time

} network_construction_lists_t;



/* Functions related to neurons initialization */

/// @brief Initialize network neurons 
/// @param snn SNN structure with neuron list
/// @param neuron_behaviour_list List of neuron types (excitatory or inhibitory)
/// @param synapse_matrix Synapse matrix
void initialize_network_neurons(spiking_nn_t *snn, network_construction_lists_t *lists);


//TODO: it would be probably helpfull to move all the function here


/* Functions related to synapses initialization */

/// @brief Initialize a synapse data
/// @param synapse Synapse to be initialized
/// @param w Weight to set to the synapse
/// @param delay Delay to set to the synapse
/// @param training Training type to set to the synapse
void initialize_synapse(synapse_t *synapse, network_construction_lists_t *lists, spiking_nn_t *snn, int synapse_id);

/// @brief Initialize network synapses
/// @param snn SNN structure with synapse list
/// @param n_synapses Number of synapses
/// @param weight_list List of synaptic weights
/// @param delay_list List of synaptic delays
/// @param training_zones List of training type for each synapse
void initialize_network_synapses(spiking_nn_t *snn, int n_synapses, network_construction_lists_t *lists);

/// @brief Reinitialize synapses
/// @param snn Spiking neural network pointer to reinitialize synaptic connections
void re_initialize_synapses(spiking_nn_t *snn);

/// @brief Reinitialize a synapse data: this function reinitializez the list of spikes, but not the weight
/// @param synapse Synapse to be reinitialized
void re_initialize_synapse(synapse_t *synapse);



/* Functions to connect neurons and synapses */

/// @brief Add input synapse to a neuron
/// @param snn SNN structure
/// @param neuron_index Index of the neuron to add a synapse
/// @param synapse_index Index of the synapse to be added as input to neuron
void add_input_synapse_to_neuron(spiking_nn_t *snn, int neuron_index, int synapse_index);

/// @brief Add output synapse to a neuron
/// @param snn SNN structure
/// @param neuron_index Index of the neuron to add a synapse
/// @param synapse_index Index of the synapse to be added as output to neuron
void add_output_synapse_to_neuron(spiking_nn_t *snn, int neuron_index, int synapse_index);

/// @brief Connect neuron to input and output synapses
/// @param snn SNN structure
/// @param synapse_matrix Synapse matrix 
void connect_neurons_and_synapses(spiking_nn_t *snn, int **synaptic_connections);



/* General function to network initialization */

/// @brief Initialize spiking neural network structure
/// @param snn Structure to initialize
/// @param neuron_type Type of neuron of this simulation
/// @param n_neurons Number of neurons
/// @param n_input Number of neurons on the input layer
/// @param n_output Number of neurons on the output layer
/// @param n_synapses Number of synapses
/// @param n_input_synapses Number of network input synapses
/// @param n_output_synapses Nummber of network output synapses
/// @param neuron_behaviour_list List with neuron types (excitatory or inhibitory)
/// @param synapse_matrix Matrix of synaptic connections
/// @param weight_list List of synaptic weights
/// @param delay_list List of synaptic delays
/// @param training_zones List of training types for each synapse
void initialize_network(spiking_nn_t *snn, simulation_configuration_t *conf, network_construction_lists_t *lists);



/* Other functions */

/// @brief This function reorders the list of synapses and local list of synapse indexes of neurons following the input criterion
/// @param snn Spiking neural network structure to reorder synapses
void reorder_synapse_list(spiking_nn_t *snn);

/// @brief Function to initialize the struct to store the results of the simulation
/// @param results Structure to initialize
/// @param conf Structure with data about the simulation configuration
/// @param snn Spiking neural network structure
void initialize_results_struct(simulation_results_t *results, simulation_configuration_t *conf, spiking_nn_t *snn);

/// @brief Function to free the memory of the lists used to initialize the network
/// @param lists Structure of lists to free
/// @param snn Spiking neural network structure
void free_lists_memory(network_construction_lists_t *lists, spiking_nn_t *snn);



/* Functions to print the network information */

/// @brief
/// @param
void print_lif_neuron_information(lif_neuron_t *lif_neuron);

/// @brief
/// @param
void print_lif_neurons_information(spiking_nn_t *snn);

/// @brief
/// @param
void print_neurons_information(spiking_nn_t *snn);

/// @brief
/// @param
void print_input_synapse_information(synapse_t *synapse);

/// @brief
/// @param
void print_synapse_information(synapse_t *synapse);

/// @brief
/// @param
void print_output_synapse_information(synapse_t *synapse);

/// @brief
/// @param
void print_synapses_information(spiking_nn_t *snn);

/// @brief
/// @param
void print_network_information(spiking_nn_t *snn);


#endif
